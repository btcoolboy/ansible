#!{{ ansible_python['executable'] }}
# -*- coding: utf-8 -*-

# Copyright (C) 2018 Maciej Delmanowski <drybjed@gmail.com>
# Copyright (C) 2023 David HÃ¤rdeman <david@hardeman.nu>
# Copyright (C) 2018-2023 DebOps <https://debops.org/>
# SPDX-License-Identifier: GPL-3.0-only

# {{ ansible_managed }}

from __future__ import print_function
from json import dumps
from sys import exit
import os
import re


# https://stackoverflow.com/questions/241327/remove-c-and-c-comments-using-python
def remove_comments(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " "
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)


def splitlines_and_cleanup(text):
    return [line.strip() for line in text.splitlines() if line.strip()]


def parse(it):
    result = []

    while True:
        try:
            line = next(it)
        except StopIteration:
            break

        tokens = line.split()
        cfg_entry = {
            "raw": line,
            "tokens": tokens,
            "parameters": {},
            "children": []
        }
        if len(tokens) == 3 and tokens[1] == '=' and tokens[2] != '{':
            cfg_entry["parameters"][tokens[0]] = tokens[2]

        token_iter = iter(tokens)
        while True:
            try:
                tk = next(token_iter)
            except StopIteration:
                result.append(cfg_entry)
                break

            if tk == '}':
                break
            elif tk == '{':
                cfg_entry["children"] = parse(it)
                for child in cfg_entry["children"]:
                    cfg_entry["parameters"].update(child["parameters"])
                result.append(cfg_entry)
                break

    return result


parameter_map = {
    'host': 'db_host',
    'database': 'db_name',
    'user': 'db_user',
    'password': 'db_password',
    'port': 'db_port',
    'enable_ssl': 'db_ssl',
    'ssl_mode': 'db_ssl',
    'ssl_ca': 'db_ssl_ca'
}


def parse_cfg(txt):
    result = {'configured': False}

    txt = remove_comments(txt)
    txt = splitlines_and_cleanup(txt)
    cfg = parse(iter(txt))

    for entry in cfg:
        if 'tokens' not in entry or len(entry['tokens']) < 3:
            continue
        elif entry['tokens'][0].lower() != "object":
            continue
        elif entry['tokens'][1].lower() == 'idopgsqlconnection':
            result = {
                'configured': True,
                'ido': 'pgsql',
                'type': 'postgresql',
            }
        elif entry['tokens'][1].lower() == 'idomysqlconnection':
            result = {
                'configured': True,
                'ido': 'mysql',
                'type': 'mariadb',
            }
        else:
            continue

        for input_key, output_key in parameter_map.items():
            if input_key not in entry['parameters']:
                continue
            val = entry['parameters'][input_key]
            if val.startswith('"') and val.endswith('"') and len(val) > 1:
                val = val.strip('"')
            result[output_key] = val

    return result


output = {'configured': True}

db_config_files = [
    ('/etc/icinga2/features-available/'
     'ido-{{ icinga_db__database_map[icinga_db__type].ido }}.conf')
]

for config_file in db_config_files:
    if not os.path.exists(config_file) or not os.path.isfile(config_file):
        output['configured'] = False
        break

    try:
        with open(config_file, 'r') as f:
            cfg = f.read()
            output.update(parse_cfg(cfg))

    except Exception:
        output['configured'] = False
        break

print(dumps(output, sort_keys=True, indent=4))

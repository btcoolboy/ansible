- name: Remove preinstalled packages
  apt:
    name: '{{ packages_to_remove }}'
    state: absent
  become: true

- name: Run autoremove
  become: true
  apt:
    autoremove: true
    
- name: Configure Ubuntu 20 for PostgreSQL
  when:
    - ansible_facts['distribution'] == 'Ubuntu'
    - ansible_facts['distribution_major_version'] is version('20', 'ge')
  block:    
    - name: Install wget
      package:
        name: wget
    
    - name: Add PGDG repository
      lineinfile:
        create: true
        line: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_facts['distribution_release'] }}-pgdg main"
        path: '/etc/apt/sources.list.d/pgdg.list'
        state: 'present'
    
    - name: Add PGDG GPG key
      ansible.builtin.apt_key:
        state: present
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    
    - name: Update apt cache
      apt:
        update_cache: true

- name: Install apt-utils
  apt:
    name: apt-utils

- name: Install packages
  apt:
    name: '{{ pg_package_list }}'
    policy_rc_d: 101  # prevent the service from starting
  notify: cleanup postgresql

- name: Delete postgresql related files
  file:
    state: absent
    path: '{{ item }}'
    force: true
  loop:
  - '{{ primary_root_dir }}'
  - '{{ replica_root_dir }}'
  - /etc/postgresql
  - /var/lib/postgresql

- name: Create dirs needed
  file:
    state: directory
    recurse: true
    path: '{{ item }}'
    owner: postgres
    group: postgres
    mode: '0700'
  loop:
  - '{{ primary_data_dir }}'
  - '{{ replica_data_dir }}'
  - /var/lib/postgresql
  notify: cleanup postgresql

- name: Find initdb
  shell: find /usr/lib -type f -name "initdb"
  register: result

- name: Set path to initdb
  set_fact:
    initdb: '{{ result.stdout }}'

- name: Initialize databases
  become: true
  become_user: '{{ pg_user }}'
  shell: '{{ initdb }} --pgdata {{ item }}'
  loop:
  - '{{ primary_data_dir }}'
  - '{{ replica_data_dir }}'

- name: Copy config templates
  template:
    src: '{{ item.conf_templ }}'
    dest: '{{ item.conf_dest }}'
    owner: postgres
    group: postgres
    force: true
  loop:
  - conf_templ: primary_postgresql.conf.j2
    conf_dest: '{{ primary_postgresql_conf }}'
  - conf_templ: replica_postgresql.conf.j2
    conf_dest: '{{ replica_postgresql_conf }}'
  - conf_templ: pg_hba.conf.j2
    conf_dest: '{{ primary_pg_hba_conf }}'
  - conf_templ: pg_hba.conf.j2
    conf_dest: '{{ replica_pg_hba_conf }}'

- name: Find pg_ctl
  shell: find /usr/lib -type f -name "pg_ctl"
  register: result

- name: Set path to initdb
  set_fact:
    pg_ctl: '{{ result.stdout }}'

- name: Start primary
  become: true
  become_user: '{{ pg_user }}'
  shell: '{{ pg_ctl }} -D {{ primary_data_dir }} -o "-p {{ primary_port }}" -l {{ primary_data_dir }}/primary.log start'
  notify:
  - stop postgresql

- name: Start replica
  become: true
  become_user: '{{ pg_user }}'
  shell: '{{ pg_ctl }} -D {{ replica_data_dir }} -o "-p {{ replica_port }}" -l {{ replica_data_dir }}/replica.log start'

- name: Check connectivity to the primary and get PostgreSQL version
  become: true
  become_user: '{{ pg_user }}'
  postgresql_ping:
    db: '{{ db_default }}'
    login_user: '{{ pg_user }}'
    login_port: '{{ primary_port }}'
  register: result

- name: Check connectivity to the replica and get PostgreSQL version
  become: true
  become_user: '{{ pg_user }}'
  postgresql_ping:
    db: '{{ db_default }}'
    login_user: '{{ pg_user }}'
    login_port: '{{ replica_port }}'

- name: Define server version
  set_fact:
    pg_major_version: '{{ result.server_version.major }}'
    pg_minor_version: '{{ result.server_version.minor }}'

- name: Print PostgreSQL version
  debug:
    msg: PostgreSQL version is {{ pg_major_version }}.{{ pg_minor_version }}
